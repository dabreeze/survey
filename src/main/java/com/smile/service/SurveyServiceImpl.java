package com.smile.service;import com.smile.data.QuestionRepository;import com.smile.data.ResponseRepository;import com.smile.data.SurveyRepository;import com.smile.dto.SurveyRequestDto;import com.smile.dto.SurveyResponseDto;import com.smile.model.Questions;import com.smile.model.Survey;import com.smile.utility.Mapper;import lombok.extern.slf4j.Slf4j;import org.smile.dto.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;@Slf4j@Servicepublic class SurveyServiceImpl implements SurveyService {    @Autowired    private ResponseRepository responseRepository;    @Autowired    private SurveyRepository repository;    @Autowired    private QuestionRepository questionRepository;    @Autowired    private Mapper mapper;    @Override    public SurveyResponseDto createSurvey(SurveyRequestDto requestDto) {        log.info("-------> Create Service started here");        Survey survey = mapper.mapSurveyRequestToSurvey(requestDto);        log.info("-------> Survey to be created {}", survey);        saveSurvey(survey);        SurveyResponseDto response =  mapper.mapSurveyToSurveyResponse(survey);        log.info("-------> Survey mapped to a response {}", response);        return response;    }//    public QuestionResponseDto createQuestion(QuestionRequestDto requestDto){//        Questions questions = new Questions();//        questions.setQuestionTitle(requestDto.getTitle());//        questions.setOptions(requestDto.getOptions());//        questions.setSurveyId(requestDto.getSurveyTitle());//        questionRepository.save(questions);//        QuestionResponseDto responseDto = new QuestionResponseDto();//        responseDto.setMessage("Question created Successfully");//        return responseDto;////    }    private Survey saveSurvey(Survey survey) {        return repository.save(survey);    }    @Override    public Survey findById(Long id) {        return repository.findById(id).orElseThrow(() ->                new NullPointerException("Survey with id " + id + " not found"));    }    @Override    public List<Survey> findAllSurvey() {        return repository.findAll();    }    @Override    public void deleteSurvey(Survey survey) {        repository.delete(survey);    }    @Override    public Survey takeSurvey(String batchNumber, String[] response) {        Survey survey = repository.findByBatchNumber(batchNumber);        List<Questions> questionsList = survey.getListOfQuestions();        log.info("-------> list of questions to take {}", questionsList);        return null;    }//    @Override//    public SurveyPollResponseDto respondToQuestion(ResponseRequestDto requestDto) {//        Response response = new Response();//        SurveyPollResponseDto pollResponseDto = new SurveyPollResponseDto();//        AtomicInteger totalCount = new AtomicInteger();//        Survey survey = repository.findByBatchNumber(requestDto.getBatchNumber());//        Response allResponse = responseRepository.findByBatchNumber(requestDto.getBatchNumber());//        List<Questions> questionsList = survey.getQuestion();//////        for (Questions question : questionsList) {//            String questionTitle = question.getQuestionTitle();//            log.info("---------> first question goes here {}", questionTitle);//            List<Options> options = question.getOptions();//            log.info("-------> list of options to take {}", options);////            int count = options.size();////            while (count != 0) {////                options.stream().filter(e -> e.getOption().equals(requestDto.getResponse()))//                        .forEach(e -> {//                            if (e != null) {//                                response.setOptionId(e.getId().toString());//                                response.setQuestionId(question.getId().toString());//                                response.setBatchNumber(survey.getBatchNumber());//                                response.setResponse(requestDto.getResponse());//                                response.setTotalCount(totalCount.getAndIncrement());//                                log.info("-----> you responded with this {}", requestDto.getResponse());////                                pollResponseDto.setResponse(requestDto.getResponse());//                                pollResponseDto.setOptionId(e.getId().toString());//                                pollResponseDto.setQuestionTitle(questionTitle);//                                pollResponseDto.setSurveyTitle(survey.getTitle());//                                pollResponseDto.setTotalCount(totalCount.getAndIncrement());//////                            } else {//                                response.setResponse("You where undecided");//                                log.info("You where undecided");//                            }//                            responseRepository.save(response);//                        });//                count--;////            }//        }////        return pollResponseDto;////    }}